#!/usr/bin/python
# -*- coding: utf-8 -*-


#大字典包括所有主机 每个主机为一个字典
#主机字典中包括一个所有库大小的字典sum和一个包括所有数据库名称的字典db
#db下每一个数据库为一个字典,字典名称为$database
#database字典中包括以下字典
#print '''
#tb 所有表名 tb_n 所有表的数量 
#p_tb_n 全部分表数量 p_tb_uniq_n 有几个独立分表
#p_tb_name 所有分表的名称 p_tb_uniq_name 每个独立分表的前缀名(分表后缀一样只取一个表) 
#d_tb_n 所有日表数量 d_tb_uniq_n 所有独立日表数量 
#d_tb_name 所有日表名称 d_tb_uniq_name 所有日表名称(日期后缀一样只取一个表)
#m_tb_n 所有月表数量 m_tb_uniq_n 所有独立月表数量 
#m_tb_n 所有月表相关字典同日表 m_tb_uniq_name 所有月表名称(日期后缀一样只取一个表)
#'''


import MySQLdb,sys
import ConfigParser
import re

cf=ConfigParser.ConfigParser()
cf.read("config.ini")
dictionary={}
for host in cf.sections():
	#print "-------------------",host,"-----------------------------"
	dictionary[host]={}
	dictionary[host]['ip']=cf.get(host,"ip")
	dictionary[host]['port']=int(cf.get(host,"port"))
	#print type(list(cf.get(host,"databases")))
	conn=MySQLdb.connect(host=cf.get(host,"ip"),port=int(cf.get(host,"port")),user="myadmin",passwd="mysupp@xmcx")
	cursor=conn.cursor()
	#给大字典中添加主机所有数据库大小的小字典
	cursor.execute("select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data  from information_schema.TABLES")
	dictionary[host]['sum']=cursor.fetchone()[0]
	print host,"total size is ","+",dictionary[host]['sum'],"+"
	dictionary[host]['db']={}
	for database in eval(cf.get(host,"databases")):
		dictionary[host]['db'][database]={}
		#print "db_name: ",database
		n=cursor.execute("show tables from %s" % database)
		#get all table name 
		dictionary[host]['db'][database]['tb']=[a[0] for a in cursor.fetchall()]
		#get table number
		dictionary[host]['db'][database]['tb_n']=n
		#get partion table number
		expr=re.compile(".*_0[0-9]$")
		part_list=[t for t in dictionary[host]['db'][database]['tb'] if expr.match(t)]
		if len(part_list) % 10 == 0:
			#print part_list
			dictionary[host]['db'][database]['p_tb_n']=len(part_list)
			dictionary[host]['db'][database]['p_tb_uniq_n']=len(part_list)/10
			dictionary[host]['db'][database]['p_tb_name']=part_list
			dictionary[host]['db'][database]['p_tb_uniq_name']=list(set([ i[0:-2] for i in part_list ]))
		#get monthly table number
		expr=re.compile(".*_[0-9]{6}$")
		month_list=[t for t in dictionary[host]['db'][database]['tb'] if expr.match(t)]
		dictionary[host]['db'][database]['m_tb_n']=len(month_list)
		dictionary[host]['db'][database]['m_tb_uniq_n']=len(list(set([ i[0:-6] for i in month_list ])))
		dictionary[host]['db'][database]['m_tb_name']=month_list
		dictionary[host]['db'][database]['m_tb_uniq_name']=list(set([ i[0:-6] for i in month_list ]))
		#get daily table number
		expr=re.compile(".*_[0-9]{8}$")
		daily_list=[t for t in dictionary[host]['db'][database]['tb'] if expr.match(t)]
		dictionary[host]['db'][database]['d_tb_n']=len(daily_list)
		dictionary[host]['db'][database]['d_tb_uniq_n']=len(list(set([ i[0:-8] for i in daily_list ])))
		dictionary[host]['db'][database]['d_tb_name']=daily_list
		dictionary[host]['db'][database]['d_tb_uniq_name']=list(set([ i[0:-8] for i in daily_list ]))
		#print dictionary[host]['db'][database]['tb']
		#print dictionary[host]['db'][database]['tb_n']
	cursor.close() 
	conn.close() 


#打印各种表的统计信息
def get_all_tb_info():
	for h in dictionary.keys():
		for d in dictionary[h]['db']:
			print "====================",d,"=========================="
			for k in dictionary[h]['db'][d].keys():
				#不打印所有表 和分区表、日表、月表的名称 
				if k != "tb" and k != "p_tb_name" and k != "m_tb_name" and k != "d_tb_name":
					#如果这个统计项目，如分表数量，独立日表名称列表不为0才打印
					if dictionary[h]['db'][d][k] and dictionary[h]['db'][d][k] != 0:
						print k,dictionary[h]['db'][d][k]

#查看所有从库复制状态
def get_slave_stat():
	for s in dictionary.keys():
		if s.split('-')[1] == "slave":
			conn=MySQLdb.connect(host=cf.get(s,"ip"),port=int(cf.get(s,"port")),user="myadmin",passwd="mysupp@xmcx")
			cursor=conn.cursor()
			cursor.execute("show slave status")
			result=tuple(cursor.fetchall()[0])
			if result[10] != "Yes":
				print "Slave_IO_Running ",result[11]
			elif result[11] != "Yes":
				print "Slave_SQL_Running: ",result[12]
			elif result[-6] != 0:
				print "Seconds_Behind_Master: ",result[-6]
			elif result[6]-result[-17] != 0:
				print "slave behind master postion: ",result[6]-result[-17]
			else:
				#print s,"slave status ok"
				pass
			#print "-----------------"


#对所有主机进行循环 找出 master机器(s为master机器，d为slave机器)
#获取所有主从同步状态 通过表数对比
def get_rep_stat():
	for s in dictionary.keys():
		if s.split('-')[1] == "master":
			#截取主机前缀 用来查找slave
			ke=s.split('-')[0]
			#查找slave主机
			for d in dictionary.keys():
				if d.split('-')[0] == ke and d.split('-')[1] != "master":
					#print s,d
					#对主机下的所有数据库做循环
					for db in dictionary[s]['db'].keys():
						#print db
						#对比master和slave的表数是否一样
						if dictionary[s]['db'][db]['tb_n'] == dictionary[d]['db'][db]['tb_n']:
							#print "ok",dictionary[s]['db'][db],dictionary[d]['db'][db]
							#print "table number is equal",s,db,d,db
							pass
						else:
							#如果不一样,分别创建一个对应master和一个slave所有表的列表
							#print "no",s,db,d,db
							#print "no",dictionary[s]['db'][db],dictionary[d]['db'][db]
							#对列表做循环，消除两个表中都有的元素,打印主从中间不一样的表
							src_table_name_list=dictionary[s]['db'][db]['tb']
							dst_table_name_list=dictionary[d]['db'][db]['tb']
							sl=src_table_name_list[0:]
							dl=dst_table_name_list[0:]
							#print src_table_name_list
							#print dst_table_name_list
							for table in src_table_name_list:
								if table in dst_table_name_list:
								#if dst_table_name_list.index(table):
									#pass
									#print table
									#print src_table_name_list
									#print dst_table_name_list
									#del dst_table_name_list[dst_table_name_list.index(table)]
									#src_table_name_list.remove(table)
									#dst_table_name_list.remove(table)
									sl.remove(table)
									dl.remove(table)
								else:
									continue
							#print src_table_name_list
							#print dst_table_name_list
							if len(sl) > 0 or len(dl) > 0:
								print s,"master uniq table: ",sl
								print d,"slave uniq table: ",dl
							#sys.exit()
	
get_slave_stat()
get_rep_stat()
#get_all_tb_info()
